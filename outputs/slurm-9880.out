pyxis: imported docker image: ghcr.io#boysle/ms-thesis-demo
//simple_gnn_py.py:566: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(model_path))
 Degree matrix D:
 tensor([[3., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 3., 0., 0.],
        [0., 0., 0., 2., 0.],
        [0., 0., 0., 0., 2.]])
 Adjacency matrix A:
 tensor([[0., 1., 1., 0., 1.],
        [0., 0., 0., 0., 1.],
        [0., 1., 0., 1., 1.],
        [0., 1., 1., 0., 0.],
        [0., 1., 0., 1., 0.]])
 Laplacian matrix L:
 tensor([[ 3., -1., -1.,  0., -1.],
        [ 0.,  1.,  0.,  0., -1.],
        [ 0., -1.,  3., -1., -1.],
        [ 0., -1., -1.,  2.,  0.],
        [ 0., -1.,  0., -1.,  2.]])
cheb approx out powers concatenated: torch.Size([10, 12])
Layers output: torch.Size([10, 50])
Data are ready
Training on cuda
Epoch: 010, Train Acc: 0.6600, Val Acc: 0.6842 || Best Val Score: 0.6842 (Epoch 001) 
Epoch: 020, Train Acc: 0.7067, Val Acc: 0.6579 || Best Val Score: 0.6842 (Epoch 001) 
Epoch: 030, Train Acc: 0.7200, Val Acc: 0.6579 || Best Val Score: 0.7368 (Epoch 027) 
Epoch: 040, Train Acc: 0.6667, Val Acc: 0.7895 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 050, Train Acc: 0.7400, Val Acc: 0.6579 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 060, Train Acc: 0.6800, Val Acc: 0.7368 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 070, Train Acc: 0.7200, Val Acc: 0.6842 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 080, Train Acc: 0.7400, Val Acc: 0.6579 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 090, Train Acc: 0.7333, Val Acc: 0.6842 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 100, Train Acc: 0.7533, Val Acc: 0.7105 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 110, Train Acc: 0.7600, Val Acc: 0.7105 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 120, Train Acc: 0.7533, Val Acc: 0.6842 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 130, Train Acc: 0.7533, Val Acc: 0.6842 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 140, Train Acc: 0.7800, Val Acc: 0.7368 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 150, Train Acc: 0.7667, Val Acc: 0.7368 || Best Val Score: 0.7895 (Epoch 040) 
Epoch: 160, Train Acc: 0.7733, Val Acc: 0.7105 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 170, Train Acc: 0.7867, Val Acc: 0.7632 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 180, Train Acc: 0.7467, Val Acc: 0.6579 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 190, Train Acc: 0.7600, Val Acc: 0.7105 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 200, Train Acc: 0.7867, Val Acc: 0.7105 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 210, Train Acc: 0.7867, Val Acc: 0.7632 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 220, Train Acc: 0.7533, Val Acc: 0.6579 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 230, Train Acc: 0.7867, Val Acc: 0.7895 || Best Val Score: 0.8158 (Epoch 153) 
Epoch: 240, Train Acc: 0.7533, Val Acc: 0.6579 || Best Val Score: 0.8158 (Epoch 153) 
Model saved to gnn_model.pth
Model also saved to cluster /users/oguz.arslan1/models/simple_gnn_model.pth
Predicted class for the new graph: 0
